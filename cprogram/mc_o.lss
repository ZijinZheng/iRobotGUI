
mc_o.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000b50  00000be4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003d  00800104  00800104  00000be8  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000011c  00000000  00000000  00000c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ddc  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001b4  00000000  00000000  00001b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ac9  00000000  00000000  00001cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00002780  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000018e  00000000  00000000  00002850  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b7  00000000  00000000  000029de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00002a95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a4 e0       	ldi	r26, 0x04	; 4
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 34       	cpi	r26, 0x41	; 65
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>

00000084 <__do_copy_data>:
  84:	11 e0       	ldi	r17, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	e0 e5       	ldi	r30, 0x50	; 80
  8c:	fb e0       	ldi	r31, 0x0B	; 11
  8e:	02 c0       	rjmp	.+4      	; 0x94 <.do_copy_data_start>

00000090 <.do_copy_data_loop>:
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0

00000094 <.do_copy_data_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <.do_copy_data_loop>
  9a:	0e 94 bb 03 	call	0x776	; 0x776 <main>
  9e:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:



// Serial receive interrupt to store sensor values
SIGNAL(SIG_USART_RECV)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
  uint8_t temp;


  temp = UDR0;
  b8:	90 91 c6 00 	lds	r25, 0x00C6

  if(sensors_flag)
  bc:	80 91 07 01 	lds	r24, 0x0107
  c0:	88 23       	and	r24, r24
  c2:	81 f0       	breq	.+32     	; 0xe4 <__vector_18+0x3e>
  {
    sensors_in[sensors_index++] = temp;
  c4:	80 91 08 01 	lds	r24, 0x0108
  c8:	e8 2f       	mov	r30, r24
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	e3 5f       	subi	r30, 0xF3	; 243
  ce:	fe 4f       	sbci	r31, 0xFE	; 254
  d0:	90 83       	st	Z, r25
  d2:	8f 5f       	subi	r24, 0xFF	; 255
  d4:	80 93 08 01 	sts	0x0108, r24
    if(sensors_index >= Sen0Size)
  d8:	80 91 08 01 	lds	r24, 0x0108
  dc:	8a 31       	cpi	r24, 0x1A	; 26
  de:	10 f0       	brcs	.+4      	; 0xe4 <__vector_18+0x3e>
      sensors_flag = 0;
  e0:	10 92 07 01 	sts	0x0107, r1
  }
}
  e4:	ff 91       	pop	r31
  e6:	ef 91       	pop	r30
  e8:	9f 91       	pop	r25
  ea:	8f 91       	pop	r24
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <__vector_11>:



// Timer 1 interrupt to time delays in ms
SIGNAL(SIG_OUTPUT_COMPARE1A)
{
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
  if(timer_cnt)
 104:	80 91 04 01 	lds	r24, 0x0104
 108:	90 91 05 01 	lds	r25, 0x0105
 10c:	89 2b       	or	r24, r25
 10e:	51 f0       	breq	.+20     	; 0x124 <__vector_11+0x2e>
    timer_cnt--;
 110:	80 91 04 01 	lds	r24, 0x0104
 114:	90 91 05 01 	lds	r25, 0x0105
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	90 93 05 01 	sts	0x0105, r25
 11e:	80 93 04 01 	sts	0x0104, r24
 122:	02 c0       	rjmp	.+4      	; 0x128 <__vector_11+0x32>
  else
    timer_on = 0;
 124:	10 92 06 01 	sts	0x0106, r1
}
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <byteTx>:



// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
 136:	98 2f       	mov	r25, r24
  while(!(UCSR0A & _BV(UDRE0))) ;
 138:	80 91 c0 00 	lds	r24, 0x00C0
 13c:	85 ff       	sbrs	r24, 5
 13e:	fc cf       	rjmp	.-8      	; 0x138 <byteTx+0x2>
  UDR0 = value;
 140:	90 93 c6 00 	sts	0x00C6, r25
}
 144:	08 95       	ret

00000146 <delay>:


// Delay for the specified time in ms without updating sensor values
void delay(uint16_t time_ms)
{
  timer_on = 1;
 146:	21 e0       	ldi	r18, 0x01	; 1
 148:	20 93 06 01 	sts	0x0106, r18
  timer_cnt = time_ms;
 14c:	90 93 05 01 	sts	0x0105, r25
 150:	80 93 04 01 	sts	0x0104, r24
  while(timer_on) ;
 154:	80 91 06 01 	lds	r24, 0x0106
 158:	88 23       	and	r24, r24
 15a:	e1 f7       	brne	.-8      	; 0x154 <delay+0xe>
}
 15c:	08 95       	ret

0000015e <delaySensors>:
// Delay for the specified time in ms and update sensor values
void delaySensors(uint16_t time_ms)
{
  uint8_t temp;

  timer_on = 1;
 15e:	21 e0       	ldi	r18, 0x01	; 1
 160:	20 93 06 01 	sts	0x0106, r18
  timer_cnt = time_ms;
 164:	90 93 05 01 	sts	0x0105, r25
 168:	80 93 04 01 	sts	0x0104, r24

// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
  UDR0 = value;
 16c:	be e8       	ldi	r27, 0x8E	; 142
      angle += (int)((sensors[SenAng1] << 8) | sensors[SenAng0]);

      byteTx(CmdSensors);
      byteTx(0);
      sensors_index = 0;
      sensors_flag = 1;
 16e:	a1 e0       	ldi	r26, 0x01	; 1
 170:	4a c0       	rjmp	.+148    	; 0x206 <delaySensors+0xa8>

  timer_on = 1;
  timer_cnt = time_ms;
  while(timer_on)
  {
    if(!sensors_flag)
 172:	80 91 07 01 	lds	r24, 0x0107
 176:	88 23       	and	r24, r24
 178:	09 f0       	breq	.+2      	; 0x17c <delaySensors+0x1e>
 17a:	45 c0       	rjmp	.+138    	; 0x206 <delaySensors+0xa8>
 17c:	40 e0       	ldi	r20, 0x00	; 0
 17e:	50 e0       	ldi	r21, 0x00	; 0
    {
      for(temp = 0; temp < Sen0Size; temp++)
        sensors[temp] = sensors_in[temp];
 180:	fa 01       	movw	r30, r20
 182:	e3 5f       	subi	r30, 0xF3	; 243
 184:	fe 4f       	sbci	r31, 0xFE	; 254
 186:	80 81       	ld	r24, Z
 188:	fa 01       	movw	r30, r20
 18a:	e9 5d       	subi	r30, 0xD9	; 217
 18c:	fe 4f       	sbci	r31, 0xFE	; 254
 18e:	80 83       	st	Z, r24
 190:	4f 5f       	subi	r20, 0xFF	; 255
 192:	5f 4f       	sbci	r21, 0xFF	; 255
  timer_cnt = time_ms;
  while(timer_on)
  {
    if(!sensors_flag)
    {
      for(temp = 0; temp < Sen0Size; temp++)
 194:	4a 31       	cpi	r20, 0x1A	; 26
 196:	51 05       	cpc	r21, r1
 198:	99 f7       	brne	.-26     	; 0x180 <delaySensors+0x22>
        sensors[temp] = sensors_in[temp];

      // Update running totals of distance and angle
      distance += (int)((sensors[SenDist1] << 8) | sensors[SenDist0]);
 19a:	40 91 09 01 	lds	r20, 0x0109
 19e:	50 91 0a 01 	lds	r21, 0x010A
 1a2:	20 91 33 01 	lds	r18, 0x0133
 1a6:	80 91 34 01 	lds	r24, 0x0134
 1aa:	72 2f       	mov	r23, r18
 1ac:	60 e0       	ldi	r22, 0x00	; 0
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	86 2b       	or	r24, r22
 1b2:	97 2b       	or	r25, r23
 1b4:	84 0f       	add	r24, r20
 1b6:	95 1f       	adc	r25, r21
 1b8:	90 93 0a 01 	sts	0x010A, r25
 1bc:	80 93 09 01 	sts	0x0109, r24
      angle += (int)((sensors[SenAng1] << 8) | sensors[SenAng0]);
 1c0:	40 91 0b 01 	lds	r20, 0x010B
 1c4:	50 91 0c 01 	lds	r21, 0x010C
 1c8:	20 91 35 01 	lds	r18, 0x0135
 1cc:	80 91 36 01 	lds	r24, 0x0136
 1d0:	32 2f       	mov	r19, r18
 1d2:	20 e0       	ldi	r18, 0x00	; 0
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	82 2b       	or	r24, r18
 1d8:	93 2b       	or	r25, r19
 1da:	84 0f       	add	r24, r20
 1dc:	95 1f       	adc	r25, r21
 1de:	90 93 0c 01 	sts	0x010C, r25
 1e2:	80 93 0b 01 	sts	0x010B, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 1e6:	80 91 c0 00 	lds	r24, 0x00C0
 1ea:	85 ff       	sbrs	r24, 5
 1ec:	fc cf       	rjmp	.-8      	; 0x1e6 <delaySensors+0x88>
  UDR0 = value;
 1ee:	b0 93 c6 00 	sts	0x00C6, r27


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 1f2:	80 91 c0 00 	lds	r24, 0x00C0
 1f6:	85 ff       	sbrs	r24, 5
 1f8:	fc cf       	rjmp	.-8      	; 0x1f2 <delaySensors+0x94>
  UDR0 = value;
 1fa:	10 92 c6 00 	sts	0x00C6, r1
      distance += (int)((sensors[SenDist1] << 8) | sensors[SenDist0]);
      angle += (int)((sensors[SenAng1] << 8) | sensors[SenAng0]);

      byteTx(CmdSensors);
      byteTx(0);
      sensors_index = 0;
 1fe:	10 92 08 01 	sts	0x0108, r1
      sensors_flag = 1;
 202:	a0 93 07 01 	sts	0x0107, r26
{
  uint8_t temp;

  timer_on = 1;
  timer_cnt = time_ms;
  while(timer_on)
 206:	80 91 06 01 	lds	r24, 0x0106
 20a:	88 23       	and	r24, r24
 20c:	09 f0       	breq	.+2      	; 0x210 <delaySensors+0xb2>
 20e:	b1 cf       	rjmp	.-158    	; 0x172 <delaySensors+0x14>
      byteTx(0);
      sensors_index = 0;
      sensors_flag = 1;
    }
  }
}
 210:	08 95       	ret

00000212 <initialize>:


// Initialize the Mind Control's ATmega168 microcontroller
void initialize(void)
{
  cli();
 212:	f8 94       	cli

  // All I/O pins are inputs except serial transmit
  DDRB = 0x00;
 214:	14 b8       	out	0x04, r1	; 4
  PORTB = 0xFF;
 216:	8f ef       	ldi	r24, 0xFF	; 255
 218:	85 b9       	out	0x05, r24	; 5
  DDRC = 0x00;
 21a:	17 b8       	out	0x07, r1	; 7
  PORTC = 0xFF;
 21c:	88 b9       	out	0x08, r24	; 8
  DDRD = 0x06;
 21e:	26 e0       	ldi	r18, 0x06	; 6
 220:	2a b9       	out	0x0a, r18	; 10
  PORTD = 0xFD;
 222:	8d ef       	ldi	r24, 0xFD	; 253
 224:	8b b9       	out	0x0b, r24	; 11

  // Set up timer 1 to generate an interrupt every 1 ms
  TCCR1A = 0x00;
 226:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = (_BV(WGM12) | _BV(CS12));
 22a:	8c e0       	ldi	r24, 0x0C	; 12
 22c:	80 93 81 00 	sts	0x0081, r24
  OCR1A = 72;
 230:	88 e4       	ldi	r24, 0x48	; 72
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	90 93 89 00 	sts	0x0089, r25
 238:	80 93 88 00 	sts	0x0088, r24
  TIMSK1 = _BV(OCIE1A);
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	80 93 6f 00 	sts	0x006F, r24

  // Set up the serial port with rx interrupt
  UBRR0 = 19;
 242:	83 e1       	ldi	r24, 0x13	; 19
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	90 93 c5 00 	sts	0x00C5, r25
 24a:	80 93 c4 00 	sts	0x00C4, r24
  UCSR0B = (_BV(RXCIE0) | _BV(TXEN0) | _BV(RXEN0));
 24e:	88 e9       	ldi	r24, 0x98	; 152
 250:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = (_BV(UCSZ00) | _BV(UCSZ01));
 254:	20 93 c2 00 	sts	0x00C2, r18

  sei();
 258:	78 94       	sei
}
 25a:	08 95       	ret

0000025c <wake>:


// Delay for the specified time in ms without updating sensor values
void delay(uint16_t time_ms)
{
  timer_on = 1;
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	80 93 06 01 	sts	0x0106, r24
  timer_cnt = time_ms;
 262:	88 ec       	ldi	r24, 0xC8	; 200
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	90 93 05 01 	sts	0x0105, r25
 26a:	80 93 04 01 	sts	0x0104, r24
  while(timer_on) ;
 26e:	80 91 06 01 	lds	r24, 0x0106
 272:	88 23       	and	r24, r24
 274:	e1 f7       	brne	.-8      	; 0x26e <wake+0x12>

// Wake up the Roomba using the device detect line
void wake(void)
{
  delay(200);
  PORTD &= ~(0x04);
 276:	5a 98       	cbi	0x0b, 2	; 11


// Delay for the specified time in ms without updating sensor values
void delay(uint16_t time_ms)
{
  timer_on = 1;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	80 93 06 01 	sts	0x0106, r24
  timer_cnt = time_ms;
 27e:	84 e6       	ldi	r24, 0x64	; 100
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	90 93 05 01 	sts	0x0105, r25
 286:	80 93 04 01 	sts	0x0104, r24
  while(timer_on) ;
 28a:	80 91 06 01 	lds	r24, 0x0106
 28e:	88 23       	and	r24, r24
 290:	e1 f7       	brne	.-8      	; 0x28a <wake+0x2e>
void wake(void)
{
  delay(200);
  PORTD &= ~(0x04);
  delay(100);
  PORTD |= 0x04;
 292:	5a 9a       	sbi	0x0b, 2	; 11


// Delay for the specified time in ms without updating sensor values
void delay(uint16_t time_ms)
{
  timer_on = 1;
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	80 93 06 01 	sts	0x0106, r24
  timer_cnt = time_ms;
 29a:	8a e0       	ldi	r24, 0x0A	; 10
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	90 93 05 01 	sts	0x0105, r25
 2a2:	80 93 04 01 	sts	0x0104, r24
  while(timer_on) ;
 2a6:	80 91 06 01 	lds	r24, 0x0106
 2aa:	88 23       	and	r24, r24
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <wake+0x4a>
  delay(200);
  PORTD &= ~(0x04);
  delay(100);
  PORTD |= 0x04;
  delay(10);
}
 2ae:	08 95       	ret

000002b0 <baud>:



// Switch the baud rate on both the Roomba and the Mind Control
void baud(uint8_t baud_code)
{
 2b0:	98 2f       	mov	r25, r24
  if(baud_code <= 11)
 2b2:	8c 30       	cpi	r24, 0x0C	; 12
 2b4:	08 f0       	brcs	.+2      	; 0x2b8 <baud+0x8>
 2b6:	62 c0       	rjmp	.+196    	; 0x37c <baud+0xcc>


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 2b8:	80 91 c0 00 	lds	r24, 0x00C0
 2bc:	85 ff       	sbrs	r24, 5
 2be:	fc cf       	rjmp	.-8      	; 0x2b8 <baud+0x8>
  UDR0 = value;
 2c0:	81 e8       	ldi	r24, 0x81	; 129
 2c2:	80 93 c6 00 	sts	0x00C6, r24
void baud(uint8_t baud_code)
{
  if(baud_code <= 11)
  {
    byteTx(CmdBaud);
    UCSR0A |= _BV(TXC0);
 2c6:	80 91 c0 00 	lds	r24, 0x00C0
 2ca:	80 64       	ori	r24, 0x40	; 64
 2cc:	80 93 c0 00 	sts	0x00C0, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 2d0:	80 91 c0 00 	lds	r24, 0x00C0
 2d4:	85 ff       	sbrs	r24, 5
 2d6:	fc cf       	rjmp	.-8      	; 0x2d0 <baud+0x20>
  UDR0 = value;
 2d8:	90 93 c6 00 	sts	0x00C6, r25
  {
    byteTx(CmdBaud);
    UCSR0A |= _BV(TXC0);
    byteTx(baud_code);
    // Wait until transmit is complete
    while(!(UCSR0A & _BV(TXC0))) ;
 2dc:	80 91 c0 00 	lds	r24, 0x00C0
 2e0:	86 ff       	sbrs	r24, 6
 2e2:	fc cf       	rjmp	.-8      	; 0x2dc <baud+0x2c>

    cli();
 2e4:	f8 94       	cli

    // Switch the baud rate register
    if(baud_code == Baud115200)
 2e6:	9b 30       	cpi	r25, 0x0B	; 11
 2e8:	19 f4       	brne	.+6      	; 0x2f0 <baud+0x40>
      UBRR0 = Ubrr115200;
 2ea:	89 e0       	ldi	r24, 0x09	; 9
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	34 c0       	rjmp	.+104    	; 0x358 <baud+0xa8>
    else if(baud_code == Baud57600)
 2f0:	9a 30       	cpi	r25, 0x0A	; 10
 2f2:	19 f4       	brne	.+6      	; 0x2fa <baud+0x4a>
      UBRR0 = Ubrr57600;
 2f4:	83 e1       	ldi	r24, 0x13	; 19
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	2f c0       	rjmp	.+94     	; 0x358 <baud+0xa8>
    else if(baud_code == Baud38400)
 2fa:	99 30       	cpi	r25, 0x09	; 9
 2fc:	19 f4       	brne	.+6      	; 0x304 <baud+0x54>
      UBRR0 = Ubrr38400;
 2fe:	8d e1       	ldi	r24, 0x1D	; 29
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	2a c0       	rjmp	.+84     	; 0x358 <baud+0xa8>
    else if(baud_code == Baud28800)
 304:	98 30       	cpi	r25, 0x08	; 8
 306:	19 f4       	brne	.+6      	; 0x30e <baud+0x5e>
      UBRR0 = Ubrr28800;
 308:	87 e2       	ldi	r24, 0x27	; 39
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	25 c0       	rjmp	.+74     	; 0x358 <baud+0xa8>
    else if(baud_code == Baud19200)
 30e:	97 30       	cpi	r25, 0x07	; 7
 310:	19 f4       	brne	.+6      	; 0x318 <baud+0x68>
      UBRR0 = Ubrr19200;
 312:	8b e3       	ldi	r24, 0x3B	; 59
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	20 c0       	rjmp	.+64     	; 0x358 <baud+0xa8>
    else if(baud_code == Baud14400)
 318:	96 30       	cpi	r25, 0x06	; 6
 31a:	19 f4       	brne	.+6      	; 0x322 <baud+0x72>
      UBRR0 = Ubrr14400;
 31c:	8f e4       	ldi	r24, 0x4F	; 79
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	1b c0       	rjmp	.+54     	; 0x358 <baud+0xa8>
    else if(baud_code == Baud9600)
 322:	95 30       	cpi	r25, 0x05	; 5
 324:	19 f4       	brne	.+6      	; 0x32c <baud+0x7c>
      UBRR0 = Ubrr9600;
 326:	87 e7       	ldi	r24, 0x77	; 119
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	16 c0       	rjmp	.+44     	; 0x358 <baud+0xa8>
    else if(baud_code == Baud4800)
 32c:	94 30       	cpi	r25, 0x04	; 4
 32e:	19 f4       	brne	.+6      	; 0x336 <baud+0x86>
      UBRR0 = Ubrr4800;
 330:	8f ee       	ldi	r24, 0xEF	; 239
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	11 c0       	rjmp	.+34     	; 0x358 <baud+0xa8>
    else if(baud_code == Baud2400)
 336:	93 30       	cpi	r25, 0x03	; 3
 338:	19 f4       	brne	.+6      	; 0x340 <baud+0x90>
      UBRR0 = Ubrr2400;
 33a:	8f ed       	ldi	r24, 0xDF	; 223
 33c:	91 e0       	ldi	r25, 0x01	; 1
 33e:	0c c0       	rjmp	.+24     	; 0x358 <baud+0xa8>
    else if(baud_code == Baud1200)
 340:	92 30       	cpi	r25, 0x02	; 2
 342:	19 f4       	brne	.+6      	; 0x34a <baud+0x9a>
      UBRR0 = Ubrr1200;
 344:	8f eb       	ldi	r24, 0xBF	; 191
 346:	93 e0       	ldi	r25, 0x03	; 3
 348:	07 c0       	rjmp	.+14     	; 0x358 <baud+0xa8>
    else if(baud_code == Baud600)
 34a:	91 30       	cpi	r25, 0x01	; 1
 34c:	19 f4       	brne	.+6      	; 0x354 <baud+0xa4>
      UBRR0 = Ubrr600;
 34e:	8f e7       	ldi	r24, 0x7F	; 127
 350:	97 e0       	ldi	r25, 0x07	; 7
 352:	02 c0       	rjmp	.+4      	; 0x358 <baud+0xa8>
    else if(baud_code == Baud300)
      UBRR0 = Ubrr300;
 354:	8f ef       	ldi	r24, 0xFF	; 255
 356:	9e e0       	ldi	r25, 0x0E	; 14
 358:	90 93 c5 00 	sts	0x00C5, r25
 35c:	80 93 c4 00 	sts	0x00C4, r24

    sei();
 360:	78 94       	sei


// Delay for the specified time in ms without updating sensor values
void delay(uint16_t time_ms)
{
  timer_on = 1;
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	80 93 06 01 	sts	0x0106, r24
  timer_cnt = time_ms;
 368:	84 e6       	ldi	r24, 0x64	; 100
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	90 93 05 01 	sts	0x0105, r25
 370:	80 93 04 01 	sts	0x0104, r24
  while(timer_on) ;
 374:	80 91 06 01 	lds	r24, 0x0106
 378:	88 23       	and	r24, r24
 37a:	e1 f7       	brne	.-8      	; 0x374 <baud+0xc4>
 37c:	08 95       	ret

0000037e <drive>:



// Send the Roomba drive commands in terms of velocity and radius
void drive(int16_t velocity, int16_t radius)
{
 37e:	28 2f       	mov	r18, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 380:	80 91 c0 00 	lds	r24, 0x00C0
 384:	85 ff       	sbrs	r24, 5
 386:	fc cf       	rjmp	.-8      	; 0x380 <drive+0x2>
  UDR0 = value;
 388:	89 e8       	ldi	r24, 0x89	; 137
 38a:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 38e:	80 91 c0 00 	lds	r24, 0x00C0
 392:	85 ff       	sbrs	r24, 5
 394:	fc cf       	rjmp	.-8      	; 0x38e <drive+0x10>
  UDR0 = value;
 396:	90 93 c6 00 	sts	0x00C6, r25


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 39a:	80 91 c0 00 	lds	r24, 0x00C0
 39e:	85 ff       	sbrs	r24, 5
 3a0:	fc cf       	rjmp	.-8      	; 0x39a <drive+0x1c>
  UDR0 = value;
 3a2:	20 93 c6 00 	sts	0x00C6, r18


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 3a6:	80 91 c0 00 	lds	r24, 0x00C0
 3aa:	85 ff       	sbrs	r24, 5
 3ac:	fc cf       	rjmp	.-8      	; 0x3a6 <drive+0x28>
  UDR0 = value;
 3ae:	70 93 c6 00 	sts	0x00C6, r23


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 3b2:	80 91 c0 00 	lds	r24, 0x00C0
 3b6:	85 ff       	sbrs	r24, 5
 3b8:	fc cf       	rjmp	.-8      	; 0x3b2 <drive+0x34>
  UDR0 = value;
 3ba:	60 93 c6 00 	sts	0x00C6, r22
  byteTx(CmdDrive);
  byteTx((uint8_t)((velocity >> 8) & 0x00FF));
  byteTx((uint8_t)(velocity & 0x00FF));
  byteTx((uint8_t)((radius >> 8) & 0x00FF));
  byteTx((uint8_t)(radius & 0x00FF));
}
 3be:	08 95       	ret

000003c0 <defineSongs>:


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 3c0:	80 91 c0 00 	lds	r24, 0x00C0
 3c4:	85 ff       	sbrs	r24, 5
 3c6:	fc cf       	rjmp	.-8      	; 0x3c0 <defineSongs>
  UDR0 = value;
 3c8:	8c e8       	ldi	r24, 0x8C	; 140
 3ca:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 3ce:	80 91 c0 00 	lds	r24, 0x00C0
 3d2:	85 ff       	sbrs	r24, 5
 3d4:	fc cf       	rjmp	.-8      	; 0x3ce <defineSongs+0xe>
  UDR0 = value;
 3d6:	10 92 c6 00 	sts	0x00C6, r1


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 3da:	80 91 c0 00 	lds	r24, 0x00C0
 3de:	85 ff       	sbrs	r24, 5
 3e0:	fc cf       	rjmp	.-8      	; 0x3da <defineSongs+0x1a>
  UDR0 = value;
 3e2:	89 e0       	ldi	r24, 0x09	; 9
 3e4:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 3e8:	80 91 c0 00 	lds	r24, 0x00C0
 3ec:	85 ff       	sbrs	r24, 5
 3ee:	fc cf       	rjmp	.-8      	; 0x3e8 <defineSongs+0x28>
  UDR0 = value;
 3f0:	8c e4       	ldi	r24, 0x4C	; 76
 3f2:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 3f6:	80 91 c0 00 	lds	r24, 0x00C0
 3fa:	85 ff       	sbrs	r24, 5
 3fc:	fc cf       	rjmp	.-8      	; 0x3f6 <defineSongs+0x36>
  UDR0 = value;
 3fe:	88 e0       	ldi	r24, 0x08	; 8
 400:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 404:	80 91 c0 00 	lds	r24, 0x00C0
 408:	85 ff       	sbrs	r24, 5
 40a:	fc cf       	rjmp	.-8      	; 0x404 <defineSongs+0x44>
  UDR0 = value;
 40c:	85 e4       	ldi	r24, 0x45	; 69
 40e:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 412:	80 91 c0 00 	lds	r24, 0x00C0
 416:	85 ff       	sbrs	r24, 5
 418:	fc cf       	rjmp	.-8      	; 0x412 <defineSongs+0x52>
  UDR0 = value;
 41a:	88 e0       	ldi	r24, 0x08	; 8
 41c:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 420:	80 91 c0 00 	lds	r24, 0x00C0
 424:	85 ff       	sbrs	r24, 5
 426:	fc cf       	rjmp	.-8      	; 0x420 <defineSongs+0x60>
  UDR0 = value;
 428:	87 e4       	ldi	r24, 0x47	; 71
 42a:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 42e:	80 91 c0 00 	lds	r24, 0x00C0
 432:	85 ff       	sbrs	r24, 5
 434:	fc cf       	rjmp	.-8      	; 0x42e <defineSongs+0x6e>
  UDR0 = value;
 436:	88 e0       	ldi	r24, 0x08	; 8
 438:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 43c:	80 91 c0 00 	lds	r24, 0x00C0
 440:	85 ff       	sbrs	r24, 5
 442:	fc cf       	rjmp	.-8      	; 0x43c <defineSongs+0x7c>
  UDR0 = value;
 444:	85 e4       	ldi	r24, 0x45	; 69
 446:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 44a:	80 91 c0 00 	lds	r24, 0x00C0
 44e:	85 ff       	sbrs	r24, 5
 450:	fc cf       	rjmp	.-8      	; 0x44a <defineSongs+0x8a>
  UDR0 = value;
 452:	88 e0       	ldi	r24, 0x08	; 8
 454:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 458:	80 91 c0 00 	lds	r24, 0x00C0
 45c:	85 ff       	sbrs	r24, 5
 45e:	fc cf       	rjmp	.-8      	; 0x458 <defineSongs+0x98>
  UDR0 = value;
 460:	82 e4       	ldi	r24, 0x42	; 66
 462:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 466:	80 91 c0 00 	lds	r24, 0x00C0
 46a:	85 ff       	sbrs	r24, 5
 46c:	fc cf       	rjmp	.-8      	; 0x466 <defineSongs+0xa6>
  UDR0 = value;
 46e:	88 e0       	ldi	r24, 0x08	; 8
 470:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 474:	80 91 c0 00 	lds	r24, 0x00C0
 478:	85 ff       	sbrs	r24, 5
 47a:	fc cf       	rjmp	.-8      	; 0x474 <defineSongs+0xb4>
  UDR0 = value;
 47c:	85 e4       	ldi	r24, 0x45	; 69
 47e:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 482:	80 91 c0 00 	lds	r24, 0x00C0
 486:	85 ff       	sbrs	r24, 5
 488:	fc cf       	rjmp	.-8      	; 0x482 <defineSongs+0xc2>
  UDR0 = value;
 48a:	88 e0       	ldi	r24, 0x08	; 8
 48c:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 490:	80 91 c0 00 	lds	r24, 0x00C0
 494:	85 ff       	sbrs	r24, 5
 496:	fc cf       	rjmp	.-8      	; 0x490 <defineSongs+0xd0>
  UDR0 = value;
 498:	8e e4       	ldi	r24, 0x4E	; 78
 49a:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 49e:	80 91 c0 00 	lds	r24, 0x00C0
 4a2:	85 ff       	sbrs	r24, 5
 4a4:	fc cf       	rjmp	.-8      	; 0x49e <defineSongs+0xde>
  UDR0 = value;
 4a6:	88 e0       	ldi	r24, 0x08	; 8
 4a8:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 4ac:	80 91 c0 00 	lds	r24, 0x00C0
 4b0:	85 ff       	sbrs	r24, 5
 4b2:	fc cf       	rjmp	.-8      	; 0x4ac <defineSongs+0xec>
  UDR0 = value;
 4b4:	8c e4       	ldi	r24, 0x4C	; 76
 4b6:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 4ba:	80 91 c0 00 	lds	r24, 0x00C0
 4be:	85 ff       	sbrs	r24, 5
 4c0:	fc cf       	rjmp	.-8      	; 0x4ba <defineSongs+0xfa>
  UDR0 = value;
 4c2:	88 e0       	ldi	r24, 0x08	; 8
 4c4:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 4c8:	80 91 c0 00 	lds	r24, 0x00C0
 4cc:	85 ff       	sbrs	r24, 5
 4ce:	fc cf       	rjmp	.-8      	; 0x4c8 <defineSongs+0x108>
  UDR0 = value;
 4d0:	81 e5       	ldi	r24, 0x51	; 81
 4d2:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 4d6:	80 91 c0 00 	lds	r24, 0x00C0
 4da:	85 ff       	sbrs	r24, 5
 4dc:	fc cf       	rjmp	.-8      	; 0x4d6 <defineSongs+0x116>
  UDR0 = value;
 4de:	80 e1       	ldi	r24, 0x10	; 16
 4e0:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 4e4:	80 91 c0 00 	lds	r24, 0x00C0
 4e8:	85 ff       	sbrs	r24, 5
 4ea:	fc cf       	rjmp	.-8      	; 0x4e4 <defineSongs+0x124>
  UDR0 = value;
 4ec:	8c e8       	ldi	r24, 0x8C	; 140
 4ee:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 4f2:	80 91 c0 00 	lds	r24, 0x00C0
 4f6:	85 ff       	sbrs	r24, 5
 4f8:	fc cf       	rjmp	.-8      	; 0x4f2 <defineSongs+0x132>
  UDR0 = value;
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 500:	80 91 c0 00 	lds	r24, 0x00C0
 504:	85 ff       	sbrs	r24, 5
 506:	fc cf       	rjmp	.-8      	; 0x500 <__stack+0x1>
  UDR0 = value;
 508:	82 e0       	ldi	r24, 0x02	; 2
 50a:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 50e:	80 91 c0 00 	lds	r24, 0x00C0
 512:	85 ff       	sbrs	r24, 5
 514:	fc cf       	rjmp	.-8      	; 0x50e <__stack+0xf>
  UDR0 = value;
 516:	85 e4       	ldi	r24, 0x45	; 69
 518:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 51c:	80 91 c0 00 	lds	r24, 0x00C0
 520:	85 ff       	sbrs	r24, 5
 522:	fc cf       	rjmp	.-8      	; 0x51c <__stack+0x1d>
  UDR0 = value;
 524:	88 e0       	ldi	r24, 0x08	; 8
 526:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 52a:	80 91 c0 00 	lds	r24, 0x00C0
 52e:	85 ff       	sbrs	r24, 5
 530:	fc cf       	rjmp	.-8      	; 0x52a <__stack+0x2b>
  UDR0 = value;
 532:	10 92 c6 00 	sts	0x00C6, r1


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 536:	80 91 c0 00 	lds	r24, 0x00C0
 53a:	85 ff       	sbrs	r24, 5
 53c:	fc cf       	rjmp	.-8      	; 0x536 <__stack+0x37>
  UDR0 = value;
 53e:	88 e0       	ldi	r24, 0x08	; 8
 540:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 544:	80 91 c0 00 	lds	r24, 0x00C0
 548:	85 ff       	sbrs	r24, 5
 54a:	fc cf       	rjmp	.-8      	; 0x544 <__stack+0x45>
  UDR0 = value;
 54c:	8c e8       	ldi	r24, 0x8C	; 140
 54e:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 552:	80 91 c0 00 	lds	r24, 0x00C0
 556:	85 ff       	sbrs	r24, 5
 558:	fc cf       	rjmp	.-8      	; 0x552 <__stack+0x53>
  UDR0 = value;
 55a:	82 e0       	ldi	r24, 0x02	; 2
 55c:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 560:	80 91 c0 00 	lds	r24, 0x00C0
 564:	85 ff       	sbrs	r24, 5
 566:	fc cf       	rjmp	.-8      	; 0x560 <__stack+0x61>
  UDR0 = value;
 568:	8e e0       	ldi	r24, 0x0E	; 14
 56a:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 56e:	80 91 c0 00 	lds	r24, 0x00C0
 572:	85 ff       	sbrs	r24, 5
 574:	fc cf       	rjmp	.-8      	; 0x56e <__stack+0x6f>
  UDR0 = value;
 576:	83 e4       	ldi	r24, 0x43	; 67
 578:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 57c:	80 91 c0 00 	lds	r24, 0x00C0
 580:	85 ff       	sbrs	r24, 5
 582:	fc cf       	rjmp	.-8      	; 0x57c <__stack+0x7d>
  UDR0 = value;
 584:	88 e1       	ldi	r24, 0x18	; 24
 586:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 58a:	80 91 c0 00 	lds	r24, 0x00C0
 58e:	85 ff       	sbrs	r24, 5
 590:	fc cf       	rjmp	.-8      	; 0x58a <__stack+0x8b>
  UDR0 = value;
 592:	87 e4       	ldi	r24, 0x47	; 71
 594:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 598:	80 91 c0 00 	lds	r24, 0x00C0
 59c:	85 ff       	sbrs	r24, 5
 59e:	fc cf       	rjmp	.-8      	; 0x598 <__stack+0x99>
  UDR0 = value;
 5a0:	80 e1       	ldi	r24, 0x10	; 16
 5a2:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 5a6:	80 91 c0 00 	lds	r24, 0x00C0
 5aa:	85 ff       	sbrs	r24, 5
 5ac:	fc cf       	rjmp	.-8      	; 0x5a6 <__stack+0xa7>
  UDR0 = value;
 5ae:	83 e4       	ldi	r24, 0x43	; 67
 5b0:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 5b4:	80 91 c0 00 	lds	r24, 0x00C0
 5b8:	85 ff       	sbrs	r24, 5
 5ba:	fc cf       	rjmp	.-8      	; 0x5b4 <__stack+0xb5>
  UDR0 = value;
 5bc:	88 e1       	ldi	r24, 0x18	; 24
 5be:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 5c2:	80 91 c0 00 	lds	r24, 0x00C0
 5c6:	85 ff       	sbrs	r24, 5
 5c8:	fc cf       	rjmp	.-8      	; 0x5c2 <__stack+0xc3>
  UDR0 = value;
 5ca:	87 e4       	ldi	r24, 0x47	; 71
 5cc:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 5d0:	80 91 c0 00 	lds	r24, 0x00C0
 5d4:	85 ff       	sbrs	r24, 5
 5d6:	fc cf       	rjmp	.-8      	; 0x5d0 <__stack+0xd1>
  UDR0 = value;
 5d8:	80 e1       	ldi	r24, 0x10	; 16
 5da:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 5de:	80 91 c0 00 	lds	r24, 0x00C0
 5e2:	85 ff       	sbrs	r24, 5
 5e4:	fc cf       	rjmp	.-8      	; 0x5de <__stack+0xdf>
  UDR0 = value;
 5e6:	83 e4       	ldi	r24, 0x43	; 67
 5e8:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 5ec:	80 91 c0 00 	lds	r24, 0x00C0
 5f0:	85 ff       	sbrs	r24, 5
 5f2:	fc cf       	rjmp	.-8      	; 0x5ec <__stack+0xed>
  UDR0 = value;
 5f4:	88 e1       	ldi	r24, 0x18	; 24
 5f6:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 5fa:	80 91 c0 00 	lds	r24, 0x00C0
 5fe:	85 ff       	sbrs	r24, 5
 600:	fc cf       	rjmp	.-8      	; 0x5fa <__stack+0xfb>
  UDR0 = value;
 602:	87 e4       	ldi	r24, 0x47	; 71
 604:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 608:	80 91 c0 00 	lds	r24, 0x00C0
 60c:	85 ff       	sbrs	r24, 5
 60e:	fc cf       	rjmp	.-8      	; 0x608 <__stack+0x109>
  UDR0 = value;
 610:	80 e1       	ldi	r24, 0x10	; 16
 612:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 616:	80 91 c0 00 	lds	r24, 0x00C0
 61a:	85 ff       	sbrs	r24, 5
 61c:	fc cf       	rjmp	.-8      	; 0x616 <__stack+0x117>
  UDR0 = value;
 61e:	83 e4       	ldi	r24, 0x43	; 67
 620:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 624:	80 91 c0 00 	lds	r24, 0x00C0
 628:	85 ff       	sbrs	r24, 5
 62a:	fc cf       	rjmp	.-8      	; 0x624 <__stack+0x125>
  UDR0 = value;
 62c:	88 e1       	ldi	r24, 0x18	; 24
 62e:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 632:	80 91 c0 00 	lds	r24, 0x00C0
 636:	85 ff       	sbrs	r24, 5
 638:	fc cf       	rjmp	.-8      	; 0x632 <__stack+0x133>
  UDR0 = value;
 63a:	87 e4       	ldi	r24, 0x47	; 71
 63c:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 640:	80 91 c0 00 	lds	r24, 0x00C0
 644:	85 ff       	sbrs	r24, 5
 646:	fc cf       	rjmp	.-8      	; 0x640 <__stack+0x141>
  UDR0 = value;
 648:	80 e1       	ldi	r24, 0x10	; 16
 64a:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 64e:	80 91 c0 00 	lds	r24, 0x00C0
 652:	85 ff       	sbrs	r24, 5
 654:	fc cf       	rjmp	.-8      	; 0x64e <__stack+0x14f>
  UDR0 = value;
 656:	83 e4       	ldi	r24, 0x43	; 67
 658:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 65c:	80 91 c0 00 	lds	r24, 0x00C0
 660:	85 ff       	sbrs	r24, 5
 662:	fc cf       	rjmp	.-8      	; 0x65c <__stack+0x15d>
  UDR0 = value;
 664:	88 e1       	ldi	r24, 0x18	; 24
 666:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 66a:	80 91 c0 00 	lds	r24, 0x00C0
 66e:	85 ff       	sbrs	r24, 5
 670:	fc cf       	rjmp	.-8      	; 0x66a <__stack+0x16b>
  UDR0 = value;
 672:	87 e4       	ldi	r24, 0x47	; 71
 674:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 678:	80 91 c0 00 	lds	r24, 0x00C0
 67c:	85 ff       	sbrs	r24, 5
 67e:	fc cf       	rjmp	.-8      	; 0x678 <__stack+0x179>
  UDR0 = value;
 680:	80 e1       	ldi	r24, 0x10	; 16
 682:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 686:	80 91 c0 00 	lds	r24, 0x00C0
 68a:	85 ff       	sbrs	r24, 5
 68c:	fc cf       	rjmp	.-8      	; 0x686 <__stack+0x187>
  UDR0 = value;
 68e:	83 e4       	ldi	r24, 0x43	; 67
 690:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 694:	80 91 c0 00 	lds	r24, 0x00C0
 698:	85 ff       	sbrs	r24, 5
 69a:	fc cf       	rjmp	.-8      	; 0x694 <__stack+0x195>
  UDR0 = value;
 69c:	88 e1       	ldi	r24, 0x18	; 24
 69e:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 6a2:	80 91 c0 00 	lds	r24, 0x00C0
 6a6:	85 ff       	sbrs	r24, 5
 6a8:	fc cf       	rjmp	.-8      	; 0x6a2 <__stack+0x1a3>
  UDR0 = value;
 6aa:	87 e4       	ldi	r24, 0x47	; 71
 6ac:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 6b0:	80 91 c0 00 	lds	r24, 0x00C0
 6b4:	85 ff       	sbrs	r24, 5
 6b6:	fc cf       	rjmp	.-8      	; 0x6b0 <__stack+0x1b1>
  UDR0 = value;
 6b8:	80 e1       	ldi	r24, 0x10	; 16
 6ba:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 6be:	80 91 c0 00 	lds	r24, 0x00C0
 6c2:	85 ff       	sbrs	r24, 5
 6c4:	fc cf       	rjmp	.-8      	; 0x6be <__stack+0x1bf>
  UDR0 = value;
 6c6:	83 e4       	ldi	r24, 0x43	; 67
 6c8:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 6cc:	80 91 c0 00 	lds	r24, 0x00C0
 6d0:	85 ff       	sbrs	r24, 5
 6d2:	fc cf       	rjmp	.-8      	; 0x6cc <__stack+0x1cd>
  UDR0 = value;
 6d4:	88 e1       	ldi	r24, 0x18	; 24
 6d6:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 6da:	80 91 c0 00 	lds	r24, 0x00C0
 6de:	85 ff       	sbrs	r24, 5
 6e0:	fc cf       	rjmp	.-8      	; 0x6da <__stack+0x1db>
  UDR0 = value;
 6e2:	87 e4       	ldi	r24, 0x47	; 71
 6e4:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 6e8:	80 91 c0 00 	lds	r24, 0x00C0
 6ec:	85 ff       	sbrs	r24, 5
 6ee:	fc cf       	rjmp	.-8      	; 0x6e8 <__stack+0x1e9>
  UDR0 = value;
 6f0:	80 e1       	ldi	r24, 0x10	; 16
 6f2:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 6f6:	80 91 c0 00 	lds	r24, 0x00C0
 6fa:	85 ff       	sbrs	r24, 5
 6fc:	fc cf       	rjmp	.-8      	; 0x6f6 <__stack+0x1f7>
  UDR0 = value;
 6fe:	8c e8       	ldi	r24, 0x8C	; 140
 700:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 704:	80 91 c0 00 	lds	r24, 0x00C0
 708:	85 ff       	sbrs	r24, 5
 70a:	fc cf       	rjmp	.-8      	; 0x704 <__stack+0x205>
  UDR0 = value;
 70c:	83 e0       	ldi	r24, 0x03	; 3
 70e:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 712:	80 91 c0 00 	lds	r24, 0x00C0
 716:	85 ff       	sbrs	r24, 5
 718:	fc cf       	rjmp	.-8      	; 0x712 <__stack+0x213>
  UDR0 = value;
 71a:	83 e0       	ldi	r24, 0x03	; 3
 71c:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 720:	80 91 c0 00 	lds	r24, 0x00C0
 724:	85 ff       	sbrs	r24, 5
 726:	fc cf       	rjmp	.-8      	; 0x720 <__stack+0x221>
  UDR0 = value;
 728:	89 e3       	ldi	r24, 0x39	; 57
 72a:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 72e:	80 91 c0 00 	lds	r24, 0x00C0
 732:	85 ff       	sbrs	r24, 5
 734:	fc cf       	rjmp	.-8      	; 0x72e <__stack+0x22f>
  UDR0 = value;
 736:	80 e2       	ldi	r24, 0x20	; 32
 738:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 73c:	80 91 c0 00 	lds	r24, 0x00C0
 740:	85 ff       	sbrs	r24, 5
 742:	fc cf       	rjmp	.-8      	; 0x73c <__stack+0x23d>
  UDR0 = value;
 744:	81 e3       	ldi	r24, 0x31	; 49
 746:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 74a:	80 91 c0 00 	lds	r24, 0x00C0
 74e:	85 ff       	sbrs	r24, 5
 750:	fc cf       	rjmp	.-8      	; 0x74a <__stack+0x24b>
  UDR0 = value;
 752:	80 e1       	ldi	r24, 0x10	; 16
 754:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 758:	80 91 c0 00 	lds	r24, 0x00C0
 75c:	85 ff       	sbrs	r24, 5
 75e:	fc cf       	rjmp	.-8      	; 0x758 <__stack+0x259>
  UDR0 = value;
 760:	8d e2       	ldi	r24, 0x2D	; 45
 762:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 766:	80 91 c0 00 	lds	r24, 0x00C0
 76a:	85 ff       	sbrs	r24, 5
 76c:	fc cf       	rjmp	.-8      	; 0x766 <__stack+0x267>
  UDR0 = value;
 76e:	80 e1       	ldi	r24, 0x10	; 16
 770:	80 93 c6 00 	sts	0x00C6, r24
  byteTx(32);
  byteTx(49);
  byteTx(16);
  byteTx(45);
  byteTx(16);
}
 774:	08 95       	ret

00000776 <main>:




int main (void) 
{
 776:	1f 93       	push	r17
  uint8_t turning = 0;
  uint8_t moving = 0;


  // Set up the Mind Control and Roomba SCI
  initialize();
 778:	0e 94 09 01 	call	0x212	; 0x212 <initialize>
  wake();
 77c:	0e 94 2e 01 	call	0x25c	; 0x25c <wake>


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 780:	80 91 c0 00 	lds	r24, 0x00C0
 784:	85 ff       	sbrs	r24, 5
 786:	fc cf       	rjmp	.-8      	; 0x780 <main+0xa>
  UDR0 = value;
 788:	80 e8       	ldi	r24, 0x80	; 128
 78a:	80 93 c6 00 	sts	0x00C6, r24

  // Set up the Mind Control and Roomba SCI
  initialize();
  wake();
  byteTx(CmdStart);
  baud(Baud28800);
 78e:	88 e0       	ldi	r24, 0x08	; 8
 790:	0e 94 58 01 	call	0x2b0	; 0x2b0 <baud>
  defineSongs();
 794:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <defineSongs>


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 798:	80 91 c0 00 	lds	r24, 0x00C0
 79c:	85 ff       	sbrs	r24, 5
 79e:	fc cf       	rjmp	.-8      	; 0x798 <main+0x22>
  UDR0 = value;
 7a0:	82 e8       	ldi	r24, 0x82	; 130
 7a2:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 7a6:	80 91 c0 00 	lds	r24, 0x00C0
 7aa:	85 ff       	sbrs	r24, 5
 7ac:	fc cf       	rjmp	.-8      	; 0x7a6 <main+0x30>
  UDR0 = value;
 7ae:	83 e8       	ldi	r24, 0x83	; 131
 7b0:	80 93 c6 00 	sts	0x00C6, r24
  byteTx(CmdSafe);


//FORWARD 100,3

distance = 0;
 7b4:	10 92 0a 01 	sts	0x010A, r1
 7b8:	10 92 09 01 	sts	0x0109, r1
drive(33, RadStraight);
 7bc:	81 e2       	ldi	r24, 0x21	; 33
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	60 e0       	ldi	r22, 0x00	; 0
 7c2:	70 e8       	ldi	r23, 0x80	; 128
 7c4:	0e 94 bf 01 	call	0x37e	; 0x37e <drive>
 7c8:	04 c0       	rjmp	.+8      	; 0x7d2 <main+0x5c>
while(distance < 100)
{
    delaySensors(100);
 7ca:	84 e6       	ldi	r24, 0x64	; 100
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	0e 94 af 00 	call	0x15e	; 0x15e <delaySensors>

//FORWARD 100,3

distance = 0;
drive(33, RadStraight);
while(distance < 100)
 7d2:	80 91 09 01 	lds	r24, 0x0109
 7d6:	90 91 0a 01 	lds	r25, 0x010A
 7da:	84 36       	cpi	r24, 0x64	; 100
 7dc:	91 05       	cpc	r25, r1
 7de:	ac f3       	brlt	.-22     	; 0x7ca <main+0x54>
{
    delaySensors(100);
}
drive(0, RadStraight);	
 7e0:	80 e0       	ldi	r24, 0x00	; 0
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	60 e0       	ldi	r22, 0x00	; 0
 7e6:	70 e8       	ldi	r23, 0x80	; 128
 7e8:	0e 94 bf 01 	call	0x37e	; 0x37e <drive>


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 7ec:	80 91 c0 00 	lds	r24, 0x00C0
 7f0:	85 ff       	sbrs	r24, 5
 7f2:	fc cf       	rjmp	.-8      	; 0x7ec <main+0x76>
  UDR0 = value;
 7f4:	8b e8       	ldi	r24, 0x8B	; 139
 7f6:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 7fa:	80 91 c0 00 	lds	r24, 0x00C0
 7fe:	85 ff       	sbrs	r24, 5
 800:	fc cf       	rjmp	.-8      	; 0x7fa <main+0x84>
  UDR0 = value;
 802:	8a e0       	ldi	r24, 0x0A	; 10
 804:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 808:	80 91 c0 00 	lds	r24, 0x00C0
 80c:	85 ff       	sbrs	r24, 5
 80e:	fc cf       	rjmp	.-8      	; 0x808 <main+0x92>
  UDR0 = value;
 810:	83 ed       	ldi	r24, 0xD3	; 211
 812:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 816:	80 91 c0 00 	lds	r24, 0x00C0
 81a:	85 ff       	sbrs	r24, 5
 81c:	fc cf       	rjmp	.-8      	; 0x816 <main+0xa0>
  UDR0 = value;
 81e:	86 e8       	ldi	r24, 0x86	; 134
 820:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 824:	80 91 c0 00 	lds	r24, 0x00C0
 828:	85 ff       	sbrs	r24, 5
 82a:	fc cf       	rjmp	.-8      	; 0x824 <main+0xae>
  UDR0 = value;
 82c:	8c e8       	ldi	r24, 0x8C	; 140
 82e:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 832:	80 91 c0 00 	lds	r24, 0x00C0
 836:	85 ff       	sbrs	r24, 5
 838:	fc cf       	rjmp	.-8      	; 0x832 <main+0xbc>
  UDR0 = value;
 83a:	81 e0       	ldi	r24, 0x01	; 1
 83c:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 840:	80 91 c0 00 	lds	r24, 0x00C0
 844:	85 ff       	sbrs	r24, 5
 846:	fc cf       	rjmp	.-8      	; 0x840 <main+0xca>
  UDR0 = value;
 848:	85 e0       	ldi	r24, 0x05	; 5
 84a:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 84e:	80 91 c0 00 	lds	r24, 0x00C0
 852:	85 ff       	sbrs	r24, 5
 854:	fc cf       	rjmp	.-8      	; 0x84e <main+0xd8>
  UDR0 = value;
 856:	89 e2       	ldi	r24, 0x29	; 41
 858:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 85c:	80 91 c0 00 	lds	r24, 0x00C0
 860:	85 ff       	sbrs	r24, 5
 862:	fc cf       	rjmp	.-8      	; 0x85c <main+0xe6>
  UDR0 = value;
 864:	80 e2       	ldi	r24, 0x20	; 32
 866:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 86a:	80 91 c0 00 	lds	r24, 0x00C0
 86e:	85 ff       	sbrs	r24, 5
 870:	fc cf       	rjmp	.-8      	; 0x86a <main+0xf4>
  UDR0 = value;
 872:	80 e3       	ldi	r24, 0x30	; 48
 874:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 878:	80 91 c0 00 	lds	r24, 0x00C0
 87c:	85 ff       	sbrs	r24, 5
 87e:	fc cf       	rjmp	.-8      	; 0x878 <main+0x102>
  UDR0 = value;
 880:	80 e2       	ldi	r24, 0x20	; 32
 882:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 886:	80 91 c0 00 	lds	r24, 0x00C0
 88a:	85 ff       	sbrs	r24, 5
 88c:	fc cf       	rjmp	.-8      	; 0x886 <main+0x110>
  UDR0 = value;
 88e:	88 e2       	ldi	r24, 0x28	; 40
 890:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 894:	80 91 c0 00 	lds	r24, 0x00C0
 898:	85 ff       	sbrs	r24, 5
 89a:	fc cf       	rjmp	.-8      	; 0x894 <main+0x11e>
  UDR0 = value;
 89c:	80 e2       	ldi	r24, 0x20	; 32
 89e:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 8a2:	80 91 c0 00 	lds	r24, 0x00C0
 8a6:	85 ff       	sbrs	r24, 5
 8a8:	fc cf       	rjmp	.-8      	; 0x8a2 <main+0x12c>
  UDR0 = value;
 8aa:	89 e2       	ldi	r24, 0x29	; 41
 8ac:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 8b0:	80 91 c0 00 	lds	r24, 0x00C0
 8b4:	85 ff       	sbrs	r24, 5
 8b6:	fc cf       	rjmp	.-8      	; 0x8b0 <main+0x13a>
  UDR0 = value;
 8b8:	80 e2       	ldi	r24, 0x20	; 32
 8ba:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 8be:	80 91 c0 00 	lds	r24, 0x00C0
 8c2:	85 ff       	sbrs	r24, 5
 8c4:	fc cf       	rjmp	.-8      	; 0x8be <main+0x148>
  UDR0 = value;
 8c6:	86 e3       	ldi	r24, 0x36	; 54
 8c8:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 8cc:	80 91 c0 00 	lds	r24, 0x00C0
 8d0:	85 ff       	sbrs	r24, 5
 8d2:	fc cf       	rjmp	.-8      	; 0x8cc <main+0x156>
  UDR0 = value;
 8d4:	80 e2       	ldi	r24, 0x20	; 32
 8d6:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 8da:	80 91 c0 00 	lds	r24, 0x00C0
 8de:	85 ff       	sbrs	r24, 5
 8e0:	fc cf       	rjmp	.-8      	; 0x8da <main+0x164>
  UDR0 = value;
 8e2:	8d e8       	ldi	r24, 0x8D	; 141
 8e4:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 8e8:	80 91 c0 00 	lds	r24, 0x00C0
 8ec:	85 ff       	sbrs	r24, 5
 8ee:	fc cf       	rjmp	.-8      	; 0x8e8 <main+0x172>
  UDR0 = value;
 8f0:	11 e0       	ldi	r17, 0x01	; 1
 8f2:	10 93 c6 00 	sts	0x00C6, r17

 


  // Stop driving
  drive(0, RadStraight);
 8f6:	80 e0       	ldi	r24, 0x00	; 0
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	60 e0       	ldi	r22, 0x00	; 0
 8fc:	70 e8       	ldi	r23, 0x80	; 128
 8fe:	0e 94 bf 01 	call	0x37e	; 0x37e <drive>


// Delay for the specified time in ms without updating sensor values
void delay(uint16_t time_ms)
{
  timer_on = 1;
 902:	10 93 06 01 	sts	0x0106, r17
  timer_cnt = time_ms;
 906:	84 ef       	ldi	r24, 0xF4	; 244
 908:	91 e0       	ldi	r25, 0x01	; 1
 90a:	90 93 05 01 	sts	0x0105, r25
 90e:	80 93 04 01 	sts	0x0104, r24
  while(timer_on) ;
 912:	80 91 06 01 	lds	r24, 0x0106
 916:	88 23       	and	r24, r24
 918:	e1 f7       	brne	.-8      	; 0x912 <main+0x19c>


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 91a:	80 91 c0 00 	lds	r24, 0x00C0
 91e:	85 ff       	sbrs	r24, 5
 920:	fc cf       	rjmp	.-8      	; 0x91a <main+0x1a4>
  UDR0 = value;
 922:	8d e8       	ldi	r24, 0x8D	; 141
 924:	80 93 c6 00 	sts	0x00C6, r24


// Transmit a byte over the serial port
void byteTx(uint8_t value)
{
  while(!(UCSR0A & _BV(UDRE0))) ;
 928:	80 91 c0 00 	lds	r24, 0x00C0
 92c:	85 ff       	sbrs	r24, 5
 92e:	fc cf       	rjmp	.-8      	; 0x928 <main+0x1b2>
  UDR0 = value;
 930:	83 e0       	ldi	r24, 0x03	; 3
 932:	80 93 c6 00 	sts	0x00C6, r24


// Delay for the specified time in ms without updating sensor values
void delay(uint16_t time_ms)
{
  timer_on = 1;
 936:	81 e0       	ldi	r24, 0x01	; 1
 938:	80 93 06 01 	sts	0x0106, r24
  timer_cnt = time_ms;
 93c:	88 ee       	ldi	r24, 0xE8	; 232
 93e:	93 e0       	ldi	r25, 0x03	; 3
 940:	90 93 05 01 	sts	0x0105, r25
 944:	80 93 04 01 	sts	0x0104, r24
  while(timer_on) ;
 948:	80 91 06 01 	lds	r24, 0x0106
 94c:	88 23       	and	r24, r24
 94e:	e1 f7       	brne	.-8      	; 0x948 <main+0x1d2>
 950:	ff cf       	rjmp	.-2      	; 0x950 <main+0x1da>

00000952 <randomAngle>:


// Return an angle value in the range 150 to 405 (67 to 180 degrees)
uint16_t randomAngle(void)
{
  return (150 + (uint16_t)(random() & 0xFF));
 952:	0e 94 05 05 	call	0xa0a	; 0xa0a <random>
 956:	9b 01       	movw	r18, r22
 958:	ac 01       	movw	r20, r24
 95a:	30 70       	andi	r19, 0x00	; 0
 95c:	2a 56       	subi	r18, 0x6A	; 106
 95e:	3f 4f       	sbci	r19, 0xFF	; 255
}
 960:	c9 01       	movw	r24, r18
 962:	08 95       	ret

00000964 <do_random>:
 964:	a0 e0       	ldi	r26, 0x00	; 0
 966:	b0 e0       	ldi	r27, 0x00	; 0
 968:	e8 eb       	ldi	r30, 0xB8	; 184
 96a:	f4 e0       	ldi	r31, 0x04	; 4
 96c:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <__prologue_saves__+0x10>
 970:	ec 01       	movw	r28, r24
 972:	a8 80       	ld	r10, Y
 974:	b9 80       	ldd	r11, Y+1	; 0x01
 976:	ca 80       	ldd	r12, Y+2	; 0x02
 978:	db 80       	ldd	r13, Y+3	; 0x03
 97a:	a1 14       	cp	r10, r1
 97c:	b1 04       	cpc	r11, r1
 97e:	c1 04       	cpc	r12, r1
 980:	d1 04       	cpc	r13, r1
 982:	41 f4       	brne	.+16     	; 0x994 <do_random+0x30>
 984:	84 e2       	ldi	r24, 0x24	; 36
 986:	a8 2e       	mov	r10, r24
 988:	89 ed       	ldi	r24, 0xD9	; 217
 98a:	b8 2e       	mov	r11, r24
 98c:	8b e5       	ldi	r24, 0x5B	; 91
 98e:	c8 2e       	mov	r12, r24
 990:	87 e0       	ldi	r24, 0x07	; 7
 992:	d8 2e       	mov	r13, r24
 994:	c6 01       	movw	r24, r12
 996:	b5 01       	movw	r22, r10
 998:	2d e1       	ldi	r18, 0x1D	; 29
 99a:	33 ef       	ldi	r19, 0xF3	; 243
 99c:	41 e0       	ldi	r20, 0x01	; 1
 99e:	50 e0       	ldi	r21, 0x00	; 0
 9a0:	0e 94 32 05 	call	0xa64	; 0xa64 <__divmodsi4>
 9a4:	27 ea       	ldi	r18, 0xA7	; 167
 9a6:	31 e4       	ldi	r19, 0x41	; 65
 9a8:	40 e0       	ldi	r20, 0x00	; 0
 9aa:	50 e0       	ldi	r21, 0x00	; 0
 9ac:	0e 94 13 05 	call	0xa26	; 0xa26 <__mulsi3>
 9b0:	7b 01       	movw	r14, r22
 9b2:	8c 01       	movw	r16, r24
 9b4:	c6 01       	movw	r24, r12
 9b6:	b5 01       	movw	r22, r10
 9b8:	2d e1       	ldi	r18, 0x1D	; 29
 9ba:	33 ef       	ldi	r19, 0xF3	; 243
 9bc:	41 e0       	ldi	r20, 0x01	; 1
 9be:	50 e0       	ldi	r21, 0x00	; 0
 9c0:	0e 94 32 05 	call	0xa64	; 0xa64 <__divmodsi4>
 9c4:	ca 01       	movw	r24, r20
 9c6:	b9 01       	movw	r22, r18
 9c8:	2c ee       	ldi	r18, 0xEC	; 236
 9ca:	34 ef       	ldi	r19, 0xF4	; 244
 9cc:	4f ef       	ldi	r20, 0xFF	; 255
 9ce:	5f ef       	ldi	r21, 0xFF	; 255
 9d0:	0e 94 13 05 	call	0xa26	; 0xa26 <__mulsi3>
 9d4:	6e 0d       	add	r22, r14
 9d6:	7f 1d       	adc	r23, r15
 9d8:	80 1f       	adc	r24, r16
 9da:	91 1f       	adc	r25, r17
 9dc:	97 ff       	sbrs	r25, 7
 9de:	04 c0       	rjmp	.+8      	; 0x9e8 <do_random+0x84>
 9e0:	61 50       	subi	r22, 0x01	; 1
 9e2:	70 40       	sbci	r23, 0x00	; 0
 9e4:	80 40       	sbci	r24, 0x00	; 0
 9e6:	90 48       	sbci	r25, 0x80	; 128
 9e8:	68 83       	st	Y, r22
 9ea:	79 83       	std	Y+1, r23	; 0x01
 9ec:	8a 83       	std	Y+2, r24	; 0x02
 9ee:	9b 83       	std	Y+3, r25	; 0x03
 9f0:	9b 01       	movw	r18, r22
 9f2:	ac 01       	movw	r20, r24
 9f4:	5f 77       	andi	r21, 0x7F	; 127
 9f6:	b9 01       	movw	r22, r18
 9f8:	ca 01       	movw	r24, r20
 9fa:	cd b7       	in	r28, 0x3d	; 61
 9fc:	de b7       	in	r29, 0x3e	; 62
 9fe:	ea e0       	ldi	r30, 0x0A	; 10
 a00:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__epilogue_restores__+0x10>

00000a04 <random_r>:
 a04:	0e 94 b2 04 	call	0x964	; 0x964 <do_random>
 a08:	08 95       	ret

00000a0a <random>:
 a0a:	80 e0       	ldi	r24, 0x00	; 0
 a0c:	91 e0       	ldi	r25, 0x01	; 1
 a0e:	0e 94 b2 04 	call	0x964	; 0x964 <do_random>
 a12:	08 95       	ret

00000a14 <srandom>:
 a14:	60 93 00 01 	sts	0x0100, r22
 a18:	70 93 01 01 	sts	0x0101, r23
 a1c:	80 93 02 01 	sts	0x0102, r24
 a20:	90 93 03 01 	sts	0x0103, r25
 a24:	08 95       	ret

00000a26 <__mulsi3>:
 a26:	62 9f       	mul	r22, r18
 a28:	d0 01       	movw	r26, r0
 a2a:	73 9f       	mul	r23, r19
 a2c:	f0 01       	movw	r30, r0
 a2e:	82 9f       	mul	r24, r18
 a30:	e0 0d       	add	r30, r0
 a32:	f1 1d       	adc	r31, r1
 a34:	64 9f       	mul	r22, r20
 a36:	e0 0d       	add	r30, r0
 a38:	f1 1d       	adc	r31, r1
 a3a:	92 9f       	mul	r25, r18
 a3c:	f0 0d       	add	r31, r0
 a3e:	83 9f       	mul	r24, r19
 a40:	f0 0d       	add	r31, r0
 a42:	74 9f       	mul	r23, r20
 a44:	f0 0d       	add	r31, r0
 a46:	65 9f       	mul	r22, r21
 a48:	f0 0d       	add	r31, r0
 a4a:	99 27       	eor	r25, r25
 a4c:	72 9f       	mul	r23, r18
 a4e:	b0 0d       	add	r27, r0
 a50:	e1 1d       	adc	r30, r1
 a52:	f9 1f       	adc	r31, r25
 a54:	63 9f       	mul	r22, r19
 a56:	b0 0d       	add	r27, r0
 a58:	e1 1d       	adc	r30, r1
 a5a:	f9 1f       	adc	r31, r25
 a5c:	bd 01       	movw	r22, r26
 a5e:	cf 01       	movw	r24, r30
 a60:	11 24       	eor	r1, r1
 a62:	08 95       	ret

00000a64 <__divmodsi4>:
 a64:	97 fb       	bst	r25, 7
 a66:	09 2e       	mov	r0, r25
 a68:	05 26       	eor	r0, r21
 a6a:	0e d0       	rcall	.+28     	; 0xa88 <__divmodsi4_neg1>
 a6c:	57 fd       	sbrc	r21, 7
 a6e:	04 d0       	rcall	.+8      	; 0xa78 <__divmodsi4_neg2>
 a70:	4b d0       	rcall	.+150    	; 0xb08 <__udivmodsi4>
 a72:	0a d0       	rcall	.+20     	; 0xa88 <__divmodsi4_neg1>
 a74:	00 1c       	adc	r0, r0
 a76:	38 f4       	brcc	.+14     	; 0xa86 <__divmodsi4_exit>

00000a78 <__divmodsi4_neg2>:
 a78:	50 95       	com	r21
 a7a:	40 95       	com	r20
 a7c:	30 95       	com	r19
 a7e:	21 95       	neg	r18
 a80:	3f 4f       	sbci	r19, 0xFF	; 255
 a82:	4f 4f       	sbci	r20, 0xFF	; 255
 a84:	5f 4f       	sbci	r21, 0xFF	; 255

00000a86 <__divmodsi4_exit>:
 a86:	08 95       	ret

00000a88 <__divmodsi4_neg1>:
 a88:	f6 f7       	brtc	.-4      	; 0xa86 <__divmodsi4_exit>
 a8a:	90 95       	com	r25
 a8c:	80 95       	com	r24
 a8e:	70 95       	com	r23
 a90:	61 95       	neg	r22
 a92:	7f 4f       	sbci	r23, 0xFF	; 255
 a94:	8f 4f       	sbci	r24, 0xFF	; 255
 a96:	9f 4f       	sbci	r25, 0xFF	; 255
 a98:	08 95       	ret

00000a9a <__prologue_saves__>:
 a9a:	2f 92       	push	r2
 a9c:	3f 92       	push	r3
 a9e:	4f 92       	push	r4
 aa0:	5f 92       	push	r5
 aa2:	6f 92       	push	r6
 aa4:	7f 92       	push	r7
 aa6:	8f 92       	push	r8
 aa8:	9f 92       	push	r9
 aaa:	af 92       	push	r10
 aac:	bf 92       	push	r11
 aae:	cf 92       	push	r12
 ab0:	df 92       	push	r13
 ab2:	ef 92       	push	r14
 ab4:	ff 92       	push	r15
 ab6:	0f 93       	push	r16
 ab8:	1f 93       	push	r17
 aba:	cf 93       	push	r28
 abc:	df 93       	push	r29
 abe:	cd b7       	in	r28, 0x3d	; 61
 ac0:	de b7       	in	r29, 0x3e	; 62
 ac2:	ca 1b       	sub	r28, r26
 ac4:	db 0b       	sbc	r29, r27
 ac6:	0f b6       	in	r0, 0x3f	; 63
 ac8:	f8 94       	cli
 aca:	de bf       	out	0x3e, r29	; 62
 acc:	0f be       	out	0x3f, r0	; 63
 ace:	cd bf       	out	0x3d, r28	; 61
 ad0:	09 94       	ijmp

00000ad2 <__epilogue_restores__>:
 ad2:	2a 88       	ldd	r2, Y+18	; 0x12
 ad4:	39 88       	ldd	r3, Y+17	; 0x11
 ad6:	48 88       	ldd	r4, Y+16	; 0x10
 ad8:	5f 84       	ldd	r5, Y+15	; 0x0f
 ada:	6e 84       	ldd	r6, Y+14	; 0x0e
 adc:	7d 84       	ldd	r7, Y+13	; 0x0d
 ade:	8c 84       	ldd	r8, Y+12	; 0x0c
 ae0:	9b 84       	ldd	r9, Y+11	; 0x0b
 ae2:	aa 84       	ldd	r10, Y+10	; 0x0a
 ae4:	b9 84       	ldd	r11, Y+9	; 0x09
 ae6:	c8 84       	ldd	r12, Y+8	; 0x08
 ae8:	df 80       	ldd	r13, Y+7	; 0x07
 aea:	ee 80       	ldd	r14, Y+6	; 0x06
 aec:	fd 80       	ldd	r15, Y+5	; 0x05
 aee:	0c 81       	ldd	r16, Y+4	; 0x04
 af0:	1b 81       	ldd	r17, Y+3	; 0x03
 af2:	aa 81       	ldd	r26, Y+2	; 0x02
 af4:	b9 81       	ldd	r27, Y+1	; 0x01
 af6:	ce 0f       	add	r28, r30
 af8:	d1 1d       	adc	r29, r1
 afa:	0f b6       	in	r0, 0x3f	; 63
 afc:	f8 94       	cli
 afe:	de bf       	out	0x3e, r29	; 62
 b00:	0f be       	out	0x3f, r0	; 63
 b02:	cd bf       	out	0x3d, r28	; 61
 b04:	ed 01       	movw	r28, r26
 b06:	08 95       	ret

00000b08 <__udivmodsi4>:
 b08:	a1 e2       	ldi	r26, 0x21	; 33
 b0a:	1a 2e       	mov	r1, r26
 b0c:	aa 1b       	sub	r26, r26
 b0e:	bb 1b       	sub	r27, r27
 b10:	fd 01       	movw	r30, r26
 b12:	0d c0       	rjmp	.+26     	; 0xb2e <__udivmodsi4_ep>

00000b14 <__udivmodsi4_loop>:
 b14:	aa 1f       	adc	r26, r26
 b16:	bb 1f       	adc	r27, r27
 b18:	ee 1f       	adc	r30, r30
 b1a:	ff 1f       	adc	r31, r31
 b1c:	a2 17       	cp	r26, r18
 b1e:	b3 07       	cpc	r27, r19
 b20:	e4 07       	cpc	r30, r20
 b22:	f5 07       	cpc	r31, r21
 b24:	20 f0       	brcs	.+8      	; 0xb2e <__udivmodsi4_ep>
 b26:	a2 1b       	sub	r26, r18
 b28:	b3 0b       	sbc	r27, r19
 b2a:	e4 0b       	sbc	r30, r20
 b2c:	f5 0b       	sbc	r31, r21

00000b2e <__udivmodsi4_ep>:
 b2e:	66 1f       	adc	r22, r22
 b30:	77 1f       	adc	r23, r23
 b32:	88 1f       	adc	r24, r24
 b34:	99 1f       	adc	r25, r25
 b36:	1a 94       	dec	r1
 b38:	69 f7       	brne	.-38     	; 0xb14 <__udivmodsi4_loop>
 b3a:	60 95       	com	r22
 b3c:	70 95       	com	r23
 b3e:	80 95       	com	r24
 b40:	90 95       	com	r25
 b42:	9b 01       	movw	r18, r22
 b44:	ac 01       	movw	r20, r24
 b46:	bd 01       	movw	r22, r26
 b48:	cf 01       	movw	r24, r30
 b4a:	08 95       	ret

00000b4c <_exit>:
 b4c:	f8 94       	cli

00000b4e <__stop_program>:
 b4e:	ff cf       	rjmp	.-2      	; 0xb4e <__stop_program>
